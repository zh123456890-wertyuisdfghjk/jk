git和github  gittee(码云，国产)
一、版本控制
    本地：自己玩--本地服务器损坏所有代码都丢失
    集中化：SVN---服务器和客户端，每次更新代码（提交代码）---会记录所有提交的记录（服务器中可以找到历史中的每个版本）
            客户端只存放最新的版本，如果服务器连不上那更新记录无法找到
    分布式：服务器和客户端----1、本地中创建一个仓库，把所有的更新记录都放在本地仓库中，当联网后可以统一上传
                            2、所有的客户端都会在储存一份服务器中的更新记录，一旦服务器损坏，可以从客户端重新获取
                            3、太占内存
二、git
    2.1 什么是git：开源的分布式版本控制
        git的特性：1、记录快照，非差异化比较  2、本地操作
                 差异化比较： 每次记录只会记录和上一次比较，修改的部分，记录修改的过程--最终得到最新版本
                 快照：只要修改了文件，在提交的时候会生成一个新的文件，没有修改的文件会生成一个链接 链接到原文件
    2.2 git的三个区域：工作区（正在操作的区域）   暂存区（操作完毕，等待上传的，临时存放）    仓库（最终存放的区域）
    2.3 git的三种状态: 已修改  已暂存  已提交----描述的是项目中的文件
    2.4 git的工作流程：1、在工作区中修改文件（新建文件） 2、将下一次想要提交的更改，进行暂存
                      3、提交更新，把暂存区的文件，用快照的方式永久存入仓库中
三、配置git
    3.1 用户名  git  config（配置）  --global（全局）    user.name    "gzj1558"                  
        邮箱    git  config  --global    user.email    "邮箱地址"
    3.2 查看全局配置：   git config --list --global
            查看单独配置项：  git config user.name     git config user.email
            查看帮助：git config -h   或   git help config
    
四、git的基本操作
    4.1 git库的创建方式：1、把本地的项目（文件夹）转换为git的目录  2、从其他的服务器中克隆一个已经存在的git仓库
    操作步骤：1、通过git bash进入git  2、通过git init 创建一个隐藏的目录  .git（本地仓库---不要动）
        想对哪个文件夹使用版本控制，先进入这个文件夹，然后右键点击git bash   使用git init创建仓库
    4.2 工作区文件的四种状态 1、未跟踪的（新创建的文件） 2、未修改（操作的文件和库中存入的文件保持一致）
                           3、已修改（和库中的文件不一致）  4、已提交（被修改的文件已经存入暂存区中）
            4.2.1 检查文件状态（status）:  
                git status（普通方式）
                在Untracked files 目录下的文件表示未被跟踪的---红色
                git status -s（精简方式查看）
                如果出现 红色的？？ 表示文件未被跟踪
            4.2.2 跟踪文件  git add +文件名 
                git status 查看文件状态   
                已跟踪的文件 会变成绿色  在commited目录下-----已经存入暂存区
                git status -s查看文件
                文件前面会有一个绿色的A 表示文件在暂存区内
            4.2.3 存入仓库--提交
                git commit  -m  "创建了一个空的index.html文件"
            4.2.4 已经提交过的文件进行了修改
                git status
                文件前面会出现红色modified--表示已修改
                git status -s
                红色的M
            4.2.5 对修改后的文件暂存
                使用 git add index.html存入暂存区
                红色的M会变为绿色，文件名也变为绿色
                git status 查看
                git commit -m "书写描述"
            4.2.7 撤销--把本地修改后的文件还原成为仓库中的版本，所做的修改全部丢失，无法恢复
                git checkout -- index.html
            4.2.8 向暂存区内一次添加多个文件
                git add .
            4.2.9 把暂存区的文件取消暂存，撤回到工作区
                git reset HEAD index.html
                撤回全部   git reset HEAD .
            4.2.10 git的工作流程：工作区（新建、修改） 暂存区  仓库
                简化提交: 直接从工作区存入仓库
                git commit -a -m "跳过暂存区直接存入仓库"
            4.2.11 移除文件 
                1、仓库和工作区的文件都移除  git rm -f 
                2、只移除仓库的文件  git rm --cached 
            
五、忽略文件:设置一个文档来规定什么类型的文件直接忽略掉不进行操作
            文档名： .gitignore
            配置格式：  #开头表示注释    /结尾表示文件夹    /开头表示防止递归   ！开头表示取反
                     glob模型对文件和文件夹进行匹配（简化的正则）
                    * 匹配的大于等于0个需要的字符
                    [abcd]匹配任何一个事括号中的字符
                    ？只匹配一个
                    ** 匹配的任意中间的目录   a/**/z 

六、历史记录的操作
            1、查看提交的历史记录 
            git log（全部）
            git log -3   最近三次的提交记录 
            git log -2 --pretty=oneline   最近两次提交记录在一行内显示，但是不显示用户信息和提交时间
            //                          识别码|用户|多久之前提交的|提交的注释--描述
            git log -2 --pretty=format:"%h | %an | %ar | %s"
            2、回到某个版本
            步骤： 1、git log 查看版本--识别码
                  跳转：2、git reset --hard 识别码
                  当回退到以前的版本时，再次查看版本只能查看到当前版本及当前版本之前的版本
                  如果想恢复当前之后的版本需要使用
                  git reflog --pretty=oneline 查看历史记录
                  再使用git reset --hard 识别码回到想要去的版本中
七：总结  git使用：1、git init  2、git status  -s  3、git add （文件名或.） 4、git commit -a -m "描述"
                  5、git reset HEAD  6、**** git checkout****撤销：把工作区恢复到仓库中的版本
                  7、git rm --cached     8、.gitignore配置 
                  9、git log   git reset --hard   git reflog --pretty=oneline

